<script lang="ts">
    import Matter from 'matter-js'
    import * as PIXI from 'pixi.js';
    import { DropShadowFilter } from '@pixi/filter-drop-shadow'
    import { pixiApplication } from '$lib/utils/App';
    import { world } from "$lib/utils/Engine";
    import { BALL_COLOR, BALL_STROKE_COLOR, BALL_LINE_WIDTH, GAME_HEIGHT, GAME_WIDTH, BALL_DROPSHADOW_OPTIONS, BALL_STARTING_X, BALL_STARTING_Y } from '$lib/utils/constants';
    import ballImage from '../assets/ball.png'
    import { onMount } from 'svelte';
    import { tweened } from 'svelte/motion';
    import { sineOut, quintIn } from 'svelte/easing';
    import { reset, lives } from '$lib/utils/stores';
    import { writable } from 'svelte/store';

    let ball: PIXI.Sprite
    let matterBall: Matter.Body

    $: ballX = tweened(BALL_STARTING_X, {
        duration: () => ($reset ? 300 : 0),
        easing: sineOut
    })

    $: ballY = tweened(BALL_STARTING_Y, {
        duration: () => ($reset ? 300 : 0),
    })

    let tweenedScale = tweened(0.7, {
        duration: 300,
        easing: quintIn
    })

    let tweenedAlpha = tweened(1, {
        duration: 300,
        easing: quintIn
    })

    onMount(() => {
        matterBall = Matter.Bodies.circle(
            BALL_STARTING_X,
            BALL_STARTING_Y,
            19,
            {
                label: 'Ball',
                mass: 1,
                friction: 0.01,
                frictionStatic: 0.2,
                frictionAir: 0,
                render: {
                    fillStyle: BALL_COLOR,
                    strokeStyle: BALL_STROKE_COLOR,
                    lineWidth: BALL_LINE_WIDTH
                }
            }
        );
        Matter.Composite.add($world, matterBall)

        PIXI.Assets.load(ballImage).then((r) => {
            ball = PIXI.Sprite.from(r);
            const ballContainer = new PIXI.Container();
            ballContainer.addChild(ball)
            ballContainer.filters = [new DropShadowFilter(BALL_DROPSHADOW_OPTIONS)];
            $pixiApplication.stage.addChild(ballContainer)
            ball.anchor.set(0.5)
            ball.scale = { x: 0.7, y: 0.7 }
        })

        const updateLoop = setInterval(update, 1000 / 60)

        return () => {
            clearInterval(updateLoop)
        }
    });

    const update = () => {
        if(ball) {
            if($reset) {
                Matter.Body.setPosition(matterBall, {
                    x: $ballX,
                    y: $ballY
                })
            }

            ball.rotation = matterBall.angle

            ball.position.set(matterBall.position.x, matterBall.position.y)
            ball.scale.set($tweenedScale)
            ball.alpha = $tweenedAlpha
        }
    }

    $: if($reset) {
        lives.set($lives - 1)

        ballX.set($reset.loseHoleX)
        ballY.set($reset.loseHoleY)

        tweenedScale.set(0.3)
        tweenedAlpha.set(0)

        setTimeout(() => ballX.set(BALL_STARTING_X), 420)
        setTimeout(() => ballY.set(BALL_STARTING_Y), 420)

        setTimeout(() => reset.set(undefined), 850)
        console.log('reset..', $reset, $lives)
    }

</script>

